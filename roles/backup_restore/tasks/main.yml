    - name: Create backup folder in node1 and node2
      file:
        path: "{{ backup_dir }}"
        state: directory
      when: inventory_hostname in groups['node1']+ groups['node2']

    - name: Take Postgres backup in node1
      shell: PGPASSWORD={{ db_password }} pg_dump -U {{ db_user }} -h {{ db_host }} {{ db_name }} > {{ backup_dir }}/{{ backup_file }}.sql
      register: pg_db_result
      when: inventory_hostname in groups['node1'][0]

    - name: PostgreSQL backup result in node1
      debug:
        var: pg_db_result
      when: inventory_hostname in groups['node1'][0]

    - name: Compress PostgreSQL backup in node1
      archive:
        path: "{{ backup_dir }}/{{ backup_file }}.sql"
        dest: "{{ backup_dir }}/{{ backup_file }}.gz"
        format: gz
      when: inventory_hostname in groups['node1'][0]

    - name: Copy the zip file from node1 to target machine
      #copy:
      # src: "{{ backup_dir }}/{{ backup_file }}.gz"
      # dest: "{{ backup_dir }}/{{ zipped_backup_file }}"
      # remote_src: true
      shell: scp "{{ backup_dir }}/{{ backup_file }}.gz" "{{ target_host }}:{{ backup_dir }}/"
      when: inventory_hostname == groups['node1'][0]

    - name: Get md5sum of zip file on node1
      shell: "md5sum {{ backup_dir }}/{{ backup_file }}.gz | awk '{ print $1 }'"
        #shell: "md5sum {{ backup_dir }}/{{ backup_file }}.gz"
      register: md5_node1
      when: inventory_hostname in groups['node1'][0]

    - name: Md5 result in node1
      debug:
        var: md5_node1.stdout
      when: inventory_hostname in groups['node1'][0]

    - name: Get md5sum of zip file on node2
      shell: "md5sum {{ backup_dir }}/{{ backup_file }}.gz | awk '{ print $1 }'"
        #shell: "md5sum {{ backup_dir }}/{{ backup_file }}.gz"
      register: md5_node2
      when: inventory_hostname in groups['node2'][0]

    - name: Md5 result in node2
      debug:
        var: md5_node2.stdout
      when: inventory_hostname in groups['node2'][0]

        #- name: Compare md5sum values of node1 and node2
        #assert:
        #that:
        #  - md5_node1.stdout[0] == md5_node2.stdout[0]
        #fail_msg: "ERROR: MD5sums are not same of node1 and node2"
        #success_msg: "SUCCESS: MD5sums are same of node1 and node2"

    - name: Install PostgreSQL
      become: true
      apt:
        name: postgresql
        state: present
      when: inventory_hostname in groups['node2'][0]

    - name: Delete database
      become_user: postgres
      postgresql_db:
        name: "{{ db_name }}"
        login_user: "{{ db_user }}"
        login_password: "{{ db_password }}"
        state: absent
      when: inventory_hostname in groups['node2'][0]

    - name: Create database
      become_user: postgres
      postgresql_db:
        name: "{{ db_name }}"
        login_user: "{{ db_user }}"
        login_password: "{{ db_password }}"
        state: present
      when: inventory_hostname in groups['node2'][0]

    - name: Unzip the backup file
      shell: gunzip {{ backup_dir }}/{{ backup_file }}.gz
      when: inventory_hostname in groups['node2'][0]

        #- name: Wait for 3 seconds
        #wait_for:
        #timeout: 3

    - name: Set unzipped filename
      set_fact:
        unzipped_file: "{{ backup_file | basename | replace('.gz', '') }}"
      when: inventory_hostname in groups['node2'][0]

    - name: Restore Postgres in node2
      shell: PGPASSWORD={{ db_password }} psql -U {{ db_user }} -d {{ db_name }} -f {{ backup_dir }}/{{ unzipped_file }}
      register: pg_restore_result
      when: inventory_hostname in groups['node2'][0]

    - name: PostgreSQL restore result
      debug:
        var: pg_restore_result
      when: inventory_hostname in groups['node2'][0]

    - name: List of tables in node1
      postgresql_query:
        query: "SELECT tablename FROM pg_catalog.pg_tables WHERE schemaname='public';"
        db: "{{ db_name }}"
        login_host: "{{ db_host }}"
        login_user: "{{ db_user }}"
        login_password: "{{ db_password }}"
      register: list_tables
      when: inventory_hostname in groups['node1'][0]

    - name: Display list of tables in node1
      debug:
        var: list_tables
      when: inventory_hostname in groups['node1'][0]

    - name: Check number of rows in node1
      postgresql_query:
        login_host: "{{ db_host }}"
        login_user: "{{ db_user }}"
        login_password: "{{ db_password }}"
        db: "{{ db_name }}"
        query: "SELECT COUNT(*) FROM {{ table_name }};"
      register: row_count
      when: inventory_hostname in groups['node1'][0]

    - name: Print row count in node1
      debug:
        var: row_count
      when: inventory_hostname in groups['node1'][0]

    - name: List of tables in node2
      postgresql_query:
        query: "SELECT tablename FROM pg_catalog.pg_tables WHERE schemaname='public';"
        db: "{{ db_name }}"
        login_host: "{{ db_host }}"
        login_user: "{{ db_user }}"
        login_password: "{{ db_password }}"
      register: list_tables
      when: inventory_hostname in groups['node2'][0]

    - name: Display list of tables in node2
      debug:
        var: list_tables
      when: inventory_hostname in groups['node2'][0]

    - name: Check number of rows in node2
      postgresql_query:
        login_host: "{{ db_host }}"
        login_user: "{{ db_user }}"
        login_password: "{{ db_password }}"
        db: "{{ db_name }}"
        query: "SELECT COUNT(*) FROM {{ table_name }};"
      register: row_count
      when: inventory_hostname in groups['node2'][0]

    - name: Print row count in node2
      debug:
        var: row_count
      when: inventory_hostname in groups['node2'][0]
