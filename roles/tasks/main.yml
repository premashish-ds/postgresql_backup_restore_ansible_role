---
- name: Take PostgreSQL backup from source instance
  shell: "pg_dump -U {{ pg_username }} -h {{ ansible_host }} {{ pg_source_db }} | gzip > {{pg_backup_dir}}/{{ pg_backup_file }}"
  register: pg_backup_result
  when: inventory_hostname == 'source_instance'

- name: Set permissions on backup file
  file:
    path: "{{pg_backup_dir}}/{{ pg_backup_file }}"
    owner: "{{ pg_username }}"
    group: "{{ pg_username }}"
    mode: '0644'
  register: pg_permission_result
  when: inventory_hostname == 'source_instance'

- name: Install psql on destination instance
  apt:
    name: postgresql-client
    state: present
  register: psql_install_result
  when: inventory_hostname == 'destination_instance'

- name: Copy PostgreSQL backup file to destination instance
  copy:
    src: "{{ pg_backup_dir }}/{{ pg_backup_file }}"
    dest: "{{pg_backup_dir}}/{{ pg_backup_file }}"
    remote_src: yes
  register: pg_copy_result

- name: Restore PostgreSQL backup to destination instance
  shell: "gunzip -c {{pg_backup_dir}}/{{ pg_backup_file }} | psql -U {{ pg_username }} -h {{ ansible_host }} -d {{ pg_dest_db }}"
  when: inventory_hostname == 'destination_instance'
  register: pg_restore_result
  vars:
    restore_file: "{{pg_backup_dir}}/{{ pg_backup_file }}"

- name: Display PostgreSQL restore result
  debug:
    var: pg_restore_result
  when: inventory_hostname == 'destination_instance'
